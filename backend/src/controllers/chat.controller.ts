import { Request, Response } from 'express';
import { claudeService } from '../services/claude.service';
import mongoose from 'mongoose';

// Interface pour les erreurs typ√©es
interface ApiError {
  message: string;
  stack?: string;
}

interface AuthRequest extends Request {
  user?: {
    _id: mongoose.Types.ObjectId;
  };
}

export const chatController = {
  async sendMessage(req: AuthRequest, res: Response) {
    try {
      console.log('=== D√©but de sendMessage ===');
      console.log('Headers re√ßus:', JSON.stringify(req.headers, null, 2));
      console.log('Body re√ßu:', JSON.stringify(req.body, null, 2));

      const { message } = req.body;
      console.log('Message extrait:', message);

      if (!message) {
        console.log('‚ùå Message manquant dans la requ√™te');
        return res.status(400).json({
          error: 'Message is required',
          details: 'No message found in request body'
        });
      }

      // V√©rification du user
      console.log('User dans la requ√™te:', JSON.stringify(req.user, null, 2));
      if (!req.user?._id) {
        console.log('‚ùå Utilisateur non authentifi√©');
        return res.status(401).json({ 
          error: 'User not authenticated',
          details: 'No user ID found in request'
        });
      }
      console.log('‚úÖ Utilisateur authentifi√©:', req.user._id);

      // Appel √† Claude
      console.log('üîÑ Pr√©paration appel Claude avec message:', message);
      const messages = [{ role: 'user' as const, content: message }];
      
      try {
        console.log('üöÄ Envoi √† Claude...');
        console.log('Messages envoy√©s:', JSON.stringify(messages, null, 2));
        
        const claudeResponse = await claudeService.sendMessage(messages);
        console.log('‚úÖ R√©ponse de Claude re√ßue:', JSON.stringify(claudeResponse, null, 2));
        return res.json(claudeResponse);
      } catch (rawError) {
        const error = rawError as ApiError;
        console.error('‚ùå Erreur Claude API:', error);
        console.error('Stack trace:', error.stack);
        console.error('Message complet erreur:', error.message);
        return res.status(500).json({ 
          error: 'Failed to get response from Claude',
          details: error.message || 'Unknown error'
        });
      }
    } catch (rawError) {
      const error = rawError as ApiError;
      console.error('‚ùå Erreur g√©n√©rale dans sendMessage:', error);
      console.error('Stack trace:', error.stack);
      return res.status(500).json({ 
        error: 'Internal server error',
        details: error.message || 'Unknown error'
      });
    } finally {
      console.log('=== Fin de sendMessage ===');
    }
  },

  async getHistory(req: AuthRequest, res: Response) {
    try {
      console.log('R√©cup√©ration de l\'historique');
      return res.json([]);
    } catch (rawError) {
      const error = rawError as ApiError;
      console.error('Erreur lors de la r√©cup√©ration de l\'historique:', error);
      return res.status(500).json({ 
        error: 'Failed to get chat history',
        details: error.message || 'Unknown error'
      });
    }
  }
};